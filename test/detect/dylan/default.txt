define class <vehicle> (<object>)
  slot owner :: <string>,
    init-keyword: owner:,
    init-value: "Northern Motors";
end class <vehicle>;

define class <car> (<vehicle>)
end class <car>;

define class <truck> (<vehicle>)
  slot capacity,
    required-init-keyword: tons:;
end class <truck>;

define method add (x :: <integer>, y :: <integer>) 
  => ( sum :: <integer>)
 x + y
end method add;

define function check()
  let truck = make(<truck>, tons: 25);
  format-out("%s's truck can carry %d\n", 
             truck.owner,
             truck.capacity);
end;

define generic tax
    (v :: <vehicle>) => (tax-in-dollars :: <float>);

define method tax
    (v :: <vehicle>) => (tax-in-dollars :: <float>)
  100.00
end;

define method tax
    (c :: <car>) => (tax-in-dollars :: <float>)
  50.0;
end method;

define method tax
    (t :: <truck>) => (tax-in-dollars :: <float>)
  // standard vehicle tax plus $10/ton
  next-method() + t.capacity * 10.0;
end method;

define function make-fibonacci()
  let n = 0;
  let m = 1;
  method ()
    let result = n + m;
    n := m;
    m := result  // return value
  end
end;

define constant fib = make-fibonacci();

for (i from 1 to 15)
  format-out("%d ", fib())
end;
