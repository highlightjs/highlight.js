// Testing type definition and type annotation highlighting:

let test'test = 15 // compiles
let bla = test'test // compiles
type test'test<'a> = Test<'a> // compiles

let ``type`` = "hello" // compiles
let ``type` is a keyword but I can use it in my 'd funky \ \\ \n " ^d binding`` = "hello" // compiles

// Type names (here with char) can be used to redefine bindings:
let char : char =
    let char = box (char "a")
    let result = unbox<char> char
    try ()
    with | :? ArgumentException -> failwith "..."
    result

// Testing for generic parameters highlighting:

type Ref<'a> =
{ mutable contents: 'a }

type Bla<'a> = {X: string}
type Blah<
         'a
         > = { x: 'a }
type Blah <
          'a
          > = { x: 'a }
type Bla  <'a> = {X: string}
let inline asdf x: Bla<'a> = {X = ""}

let inline asdf x: Bla<^a> = {X = ""}
let inline asdf x: Bla< ^a > = {X = ""}

let genericSumUnits ( x : float<'u>) (y: float<'u>) = x + y

let inline konst x _ = x

type CFunctor() =
    static member inline fmap (f: ^a -> ^b, a: ^a list) = List.map f a
    static member inline fmap (f: ^a -> ^b, a: ^a option) =
        match a with
        | None -> None
        | Some x -> Some (f x)

    // default implementation of replace
    static member inline replace< ^a, ^b, ^c, ^d, ^e when ^a :> CFunctor and (^a or ^d): (static member fmap: (^b -> ^c) * ^d -> ^e) > (a, f) =
        ((^a or ^d) : (static member fmap : (^b -> ^c) * ^d -> ^e) (konst a, f))

    // call overridden replace if present
    static member inline replace< ^a, ^b, ^c when ^b: (static member replace: ^a * ^b -> ^c)>(a: ^a, f: ^b) =
        (^b : (static member replace: ^a * ^b -> ^c) (a, f))

let inline replace_instance< ^a, ^b, ^c, ^d when (^a or ^c): (static member replace: ^b * ^c -> ^d)> (a: ^b, f: ^c) =
        ((^a or ^c): (static member replace: ^b * ^c -> ^d) (a, f))

// Note the concrete type 'CFunctor' specified in the signature
let inline replace (a: ^a) (f: ^b): ^a0 when (CFunctor or  ^b): (static member replace: ^a *  ^b ->  ^a0) =
    replace_instance<CFunctor, _, _, _> (a, f)