<span class="hljs-comment">// Testing type definition and type annotation highlighting:</span>

<span class="hljs-keyword">let</span> test&#x27;test <span class="hljs-operator">=</span> <span class="hljs-number">15</span> <span class="hljs-comment">// compiles</span>
<span class="hljs-keyword">let</span> bla <span class="hljs-operator">=</span> test&#x27;test <span class="hljs-comment">// compiles</span>
<span class="hljs-keyword">type</span> <span class="hljs-title class_">test&#x27;test</span><span class="hljs-operator">&lt;</span><span class="hljs-symbol">&#x27;a</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">=</span> Test<span class="hljs-operator">&lt;</span><span class="hljs-symbol">&#x27;a</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment">// compiles</span>

<span class="hljs-keyword">let</span> <span class="hljs-variable">``type``</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-comment">// compiles</span>
<span class="hljs-keyword">let</span> <span class="hljs-variable">``type` is a keyword but I can use it in my &#x27;d funky \ \\ \n &quot; ^d binding``</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-comment">// compiles</span>

<span class="hljs-comment">// Type names (here with char) can be used to redefine bindings:</span>
<span class="hljs-keyword">let</span> char <span class="hljs-operator">:</span> char <span class="hljs-operator">=</span>
    <span class="hljs-keyword">let</span> char <span class="hljs-operator">=</span> <span class="hljs-built_in">box</span> (char <span class="hljs-string">&quot;a&quot;</span>)
    <span class="hljs-keyword">let</span> result <span class="hljs-operator">=</span> <span class="hljs-built_in">unbox</span><span class="hljs-operator">&lt;</span>char<span class="hljs-operator">&gt;</span> char
    <span class="hljs-keyword">try</span> ()
    <span class="hljs-keyword">with</span> <span class="hljs-operator">|</span> <span class="hljs-operator">:?</span> ArgumentException <span class="hljs-operator">-&gt;</span> <span class="hljs-built_in">failwith</span> <span class="hljs-string">&quot;...&quot;</span>
    result

<span class="hljs-comment">// Testing for generic parameters highlighting:</span>

<span class="hljs-keyword">type</span> <span class="hljs-title class_">Ref</span><span class="hljs-operator">&lt;</span><span class="hljs-symbol">&#x27;a</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">=</span>
{ <span class="hljs-keyword">mutable</span> contents<span class="hljs-operator">:</span> <span class="hljs-symbol">&#x27;a</span> }

<span class="hljs-keyword">type</span> <span class="hljs-title class_">Bla</span><span class="hljs-operator">&lt;</span><span class="hljs-symbol">&#x27;a</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">=</span> {X<span class="hljs-operator">:</span> string}
<span class="hljs-keyword">type</span> <span class="hljs-title class_">Blah</span><span class="hljs-operator">&lt;</span>
         <span class="hljs-symbol">&#x27;a</span>
         <span class="hljs-operator">&gt;</span> <span class="hljs-operator">=</span> { x<span class="hljs-operator">:</span> <span class="hljs-symbol">&#x27;a</span> }
<span class="hljs-keyword">type</span> <span class="hljs-title class_">Blah</span> <span class="hljs-operator">&lt;</span>
          <span class="hljs-symbol">&#x27;a</span>
          <span class="hljs-operator">&gt;</span> <span class="hljs-operator">=</span> { x<span class="hljs-operator">:</span> <span class="hljs-symbol">&#x27;a</span> }
<span class="hljs-keyword">type</span> <span class="hljs-title class_">Bla</span>  <span class="hljs-operator">&lt;</span><span class="hljs-symbol">&#x27;a</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">=</span> {X<span class="hljs-operator">:</span> string}
<span class="hljs-keyword">let</span> <span class="hljs-keyword">inline</span> asdf x<span class="hljs-operator">:</span> Bla<span class="hljs-operator">&lt;</span><span class="hljs-symbol">&#x27;a</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">=</span> {X <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>}

<span class="hljs-keyword">let</span> <span class="hljs-keyword">inline</span> asdf x<span class="hljs-operator">:</span> Bla<span class="hljs-operator">&lt;^</span>a<span class="hljs-operator">&gt;</span> <span class="hljs-operator">=</span> {X <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>}
<span class="hljs-keyword">let</span> <span class="hljs-keyword">inline</span> asdf x<span class="hljs-operator">:</span> Bla<span class="hljs-operator">&lt;</span> <span class="hljs-symbol">^a</span> <span class="hljs-operator">&gt;</span> <span class="hljs-operator">=</span> {X <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>}

<span class="hljs-keyword">let</span> genericSumUnits ( x <span class="hljs-operator">:</span> float<span class="hljs-operator">&lt;</span><span class="hljs-symbol">&#x27;u</span><span class="hljs-operator">&gt;</span>) (y<span class="hljs-operator">:</span> float<span class="hljs-operator">&lt;</span><span class="hljs-symbol">&#x27;u</span><span class="hljs-operator">&gt;</span>) <span class="hljs-operator">=</span> x <span class="hljs-operator">+</span> y

<span class="hljs-keyword">let</span> <span class="hljs-keyword">inline</span> konst x _ <span class="hljs-operator">=</span> x

<span class="hljs-keyword">type</span> <span class="hljs-title class_">CFunctor</span>() <span class="hljs-operator">=</span>
    <span class="hljs-keyword">static</span> <span class="hljs-keyword">member</span> <span class="hljs-keyword">inline</span> fmap (f<span class="hljs-operator">:</span> <span class="hljs-symbol">^a</span> <span class="hljs-operator">-&gt;</span> <span class="hljs-symbol">^b</span>, a<span class="hljs-operator">:</span> <span class="hljs-symbol">^a</span> list) <span class="hljs-operator">=</span> List.map f a
    <span class="hljs-keyword">static</span> <span class="hljs-keyword">member</span> <span class="hljs-keyword">inline</span> fmap (f<span class="hljs-operator">:</span> <span class="hljs-symbol">^a</span> <span class="hljs-operator">-&gt;</span> <span class="hljs-symbol">^b</span>, a<span class="hljs-operator">:</span> <span class="hljs-symbol">^a</span> option) <span class="hljs-operator">=</span>
        <span class="hljs-keyword">match</span> a <span class="hljs-keyword">with</span>
        <span class="hljs-operator">|</span> <span class="hljs-literal">None</span> <span class="hljs-operator">-&gt;</span> <span class="hljs-literal">None</span>
        <span class="hljs-operator">|</span> <span class="hljs-literal">Some</span> x <span class="hljs-operator">-&gt;</span> <span class="hljs-literal">Some</span> (f x)

    <span class="hljs-comment">// default implementation of replace</span>
    <span class="hljs-keyword">static</span> <span class="hljs-keyword">member</span> <span class="hljs-keyword">inline</span> replace<span class="hljs-operator">&lt;</span> <span class="hljs-symbol">^a</span>, <span class="hljs-symbol">^b</span>, <span class="hljs-symbol">^c</span>, <span class="hljs-symbol">^d</span>, <span class="hljs-symbol">^e</span> <span class="hljs-keyword">when</span> <span class="hljs-symbol">^a</span> <span class="hljs-operator">:&gt;</span> CFunctor <span class="hljs-keyword">and</span> (<span class="hljs-symbol">^a</span> <span class="hljs-keyword">or</span> <span class="hljs-symbol">^d</span>)<span class="hljs-operator">:</span> (<span class="hljs-keyword">static</span> <span class="hljs-keyword">member</span> fmap<span class="hljs-operator">:</span> (<span class="hljs-symbol">^b</span> <span class="hljs-operator">-&gt;</span> <span class="hljs-symbol">^c</span>) <span class="hljs-operator">*</span> <span class="hljs-symbol">^d</span> <span class="hljs-operator">-&gt;</span> <span class="hljs-symbol">^e</span>) <span class="hljs-operator">&gt;</span> (a, f) <span class="hljs-operator">=</span>
        ((<span class="hljs-symbol">^a</span> <span class="hljs-keyword">or</span> <span class="hljs-symbol">^d</span>) <span class="hljs-operator">:</span> (<span class="hljs-keyword">static</span> <span class="hljs-keyword">member</span> fmap <span class="hljs-operator">:</span> (<span class="hljs-symbol">^b</span> <span class="hljs-operator">-&gt;</span> <span class="hljs-symbol">^c</span>) <span class="hljs-operator">*</span> <span class="hljs-symbol">^d</span> <span class="hljs-operator">-&gt;</span> <span class="hljs-symbol">^e</span>) (konst a, f))

    <span class="hljs-comment">// call overridden replace if present</span>
    <span class="hljs-keyword">static</span> <span class="hljs-keyword">member</span> <span class="hljs-keyword">inline</span> replace<span class="hljs-operator">&lt;</span> <span class="hljs-symbol">^a</span>, <span class="hljs-symbol">^b</span>, <span class="hljs-symbol">^c</span> <span class="hljs-keyword">when</span> <span class="hljs-symbol">^b</span><span class="hljs-operator">:</span> (<span class="hljs-keyword">static</span> <span class="hljs-keyword">member</span> replace<span class="hljs-operator">:</span> <span class="hljs-symbol">^a</span> <span class="hljs-operator">*</span> <span class="hljs-symbol">^b</span> <span class="hljs-operator">-&gt;</span> <span class="hljs-symbol">^c</span>)<span class="hljs-operator">&gt;</span>(a<span class="hljs-operator">:</span> <span class="hljs-symbol">^a</span>, f<span class="hljs-operator">:</span> <span class="hljs-symbol">^b</span>) <span class="hljs-operator">=</span>
        (<span class="hljs-symbol">^b</span> <span class="hljs-operator">:</span> (<span class="hljs-keyword">static</span> <span class="hljs-keyword">member</span> replace<span class="hljs-operator">:</span> <span class="hljs-symbol">^a</span> <span class="hljs-operator">*</span> <span class="hljs-symbol">^b</span> <span class="hljs-operator">-&gt;</span> <span class="hljs-symbol">^c</span>) (a, f))

<span class="hljs-keyword">let</span> <span class="hljs-keyword">inline</span> replace_instance<span class="hljs-operator">&lt;</span> <span class="hljs-symbol">^a</span>, <span class="hljs-symbol">^b</span>, <span class="hljs-symbol">^c</span>, <span class="hljs-symbol">^d</span> <span class="hljs-keyword">when</span> (<span class="hljs-symbol">^a</span> <span class="hljs-keyword">or</span> <span class="hljs-symbol">^c</span>)<span class="hljs-operator">:</span> (<span class="hljs-keyword">static</span> <span class="hljs-keyword">member</span> replace<span class="hljs-operator">:</span> <span class="hljs-symbol">^b</span> <span class="hljs-operator">*</span> <span class="hljs-symbol">^c</span> <span class="hljs-operator">-&gt;</span> <span class="hljs-symbol">^d</span>)<span class="hljs-operator">&gt;</span> (a<span class="hljs-operator">:</span> <span class="hljs-symbol">^b</span>, f<span class="hljs-operator">:</span> <span class="hljs-symbol">^c</span>) <span class="hljs-operator">=</span>
        ((<span class="hljs-symbol">^a</span> <span class="hljs-keyword">or</span> <span class="hljs-symbol">^c</span>)<span class="hljs-operator">:</span> (<span class="hljs-keyword">static</span> <span class="hljs-keyword">member</span> replace<span class="hljs-operator">:</span> <span class="hljs-symbol">^b</span> <span class="hljs-operator">*</span> <span class="hljs-symbol">^c</span> <span class="hljs-operator">-&gt;</span> <span class="hljs-symbol">^d</span>) (a, f))

<span class="hljs-comment">// Note the concrete type &#x27;CFunctor&#x27; specified in the signature</span>
<span class="hljs-keyword">let</span> <span class="hljs-keyword">inline</span> replace (a<span class="hljs-operator">:</span> <span class="hljs-symbol">^a</span>) (f<span class="hljs-operator">:</span> <span class="hljs-symbol">^b</span>)<span class="hljs-operator">:</span> <span class="hljs-symbol">^a0</span> <span class="hljs-keyword">when</span> (CFunctor <span class="hljs-keyword">or</span>  <span class="hljs-symbol">^b</span>)<span class="hljs-operator">:</span> (<span class="hljs-keyword">static</span> <span class="hljs-keyword">member</span> replace<span class="hljs-operator">:</span> <span class="hljs-symbol">^a</span> <span class="hljs-operator">*</span>  <span class="hljs-symbol">^b</span> <span class="hljs-operator">-&gt;</span>  <span class="hljs-symbol">^a0</span>) <span class="hljs-operator">=</span>
    replace_instance<span class="hljs-operator">&lt;</span>CFunctor, _, _, _<span class="hljs-operator">&gt;</span> (a, f)