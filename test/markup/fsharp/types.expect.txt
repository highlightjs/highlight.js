<span class="hljs-comment">// Testing type definition and type annotation highlighting:</span>

<span class="hljs-keyword">let</span> test&#x27;test <span class="hljs-operator">=</span> <span class="hljs-number">15</span> <span class="hljs-comment">// compiles</span>
<span class="hljs-keyword">let</span> bla <span class="hljs-operator">=</span> test&#x27;test <span class="hljs-comment">// compiles</span>
<span class="hljs-keyword">type</span> <span class="hljs-title class_">test&#x27;test</span><span class="hljs-operator">&lt;</span><span class="hljs-symbol">&#x27;a</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">=</span> Test<span class="hljs-operator">&lt;</span><span class="hljs-symbol">&#x27;a</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment">// compiles</span>

<span class="hljs-keyword">let</span> <span class="hljs-variable">``type``</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-comment">// compiles</span>
<span class="hljs-keyword">let</span> <span class="hljs-variable">``type` is a keyword but I can use it in my &#x27;d funky \ \\ \n &quot; ^d binding``</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-comment">// compiles</span>

<span class="hljs-comment">// Type names (here with char) can be used to redefine bindings:</span>
<span class="hljs-keyword">let</span> char <span class="hljs-type"><span class="hljs-operator">:</span> char </span><span class="hljs-operator">=</span>
    <span class="hljs-keyword">let</span> char <span class="hljs-operator">=</span> <span class="hljs-built_in">box</span> (char <span class="hljs-string">&quot;a&quot;</span>)
    <span class="hljs-keyword">let</span> result <span class="hljs-operator">=</span> <span class="hljs-built_in">unbox</span><span class="hljs-operator">&lt;</span>char<span class="hljs-operator">&gt;</span> char
    <span class="hljs-keyword">try</span> ()
    <span class="hljs-keyword">with</span> <span class="hljs-operator">|</span> <span class="hljs-operator">:?</span> ArgumentException <span class="hljs-operator">-&gt;</span> <span class="hljs-built_in">failwith</span> <span class="hljs-string">&quot;...&quot;</span>
    result

<span class="hljs-comment">// All the following type annotation examples are valid F#</span>
<span class="hljs-keyword">type</span> <span class="hljs-variable">``my = type``</span> <span class="hljs-operator">=</span> {a<span class="hljs-type"><span class="hljs-operator">:</span>string</span>}
<span class="hljs-keyword">let</span> x <span class="hljs-type"><span class="hljs-operator">:</span> char array </span><span class="hljs-operator">=</span> [<span class="hljs-operator">|</span><span class="hljs-string">&#x27;a&#x27;</span><span class="hljs-operator">|</span>]
<span class="hljs-keyword">let</span> f f&#x27; <span class="hljs-operator">=</span> f&#x27; () <span class="hljs-type"><span class="hljs-operator">:</span> <span class="hljs-symbol">&#x27;returnType</span> <span class="hljs-comment">// the type annotation should end now</span></span>
<span class="hljs-keyword">and</span> <span class="hljs-built_in">not</span> color this<span class="hljs-operator">...</span>
<span class="hljs-keyword">let</span>&#x27;s <span class="hljs-keyword">end</span> this <span class="hljs-keyword">with</span> an <span class="hljs-keyword">end</span> pattern<span class="hljs-operator">:</span> <span class="hljs-operator">=</span>
<span class="hljs-keyword">let</span> anonymousRecordAnnotation <span class="hljs-type"><span class="hljs-operator">:</span> {| X<span class="hljs-operator">:</span> string<span class="hljs-operator">;</span> Y<span class="hljs-operator">:</span> int array <span class="hljs-operator">*</span> string |} </span><span class="hljs-operator">=</span> <span class="hljs-operator">...</span>
<span class="hljs-keyword">let</span> nested <span class="hljs-type"><span class="hljs-operator">:</span> {| X<span class="hljs-operator">:</span> string<span class="hljs-operator">;</span> Y<span class="hljs-operator">:</span> {| Nested<span class="hljs-operator">:</span> bool |} |} </span><span class="hljs-operator">=</span> ()
<span class="hljs-keyword">let</span> test (a<span class="hljs-type"><span class="hljs-operator">:</span> {| X<span class="hljs-operator">:</span> string<span class="hljs-operator">;</span> <span class="hljs-comment">(* this is a comment *)</span> Y<span class="hljs-operator">:</span> {| Nested<span class="hljs-operator">:</span> bool |} |}</span>) <span class="hljs-operator">=</span> ()
<span class="hljs-keyword">let</span> f (a<span class="hljs-type"><span class="hljs-operator">:</span> (string[])</span>) <span class="hljs-operator">=</span> a
<span class="hljs-keyword">let</span> f (a<span class="hljs-type"><span class="hljs-operator">:</span> int <span class="hljs-operator">-&gt;</span> (unit <span class="hljs-operator">-&gt;</span> string) <span class="hljs-operator">-&gt;</span> string</span>) (b<span class="hljs-type"><span class="hljs-operator">:</span> (<span class="hljs-symbol">&#x27;a</span> <span class="hljs-operator">-&gt;</span> <span class="hljs-symbol">&#x27;b</span> <span class="hljs-operator">-&gt;</span> _ <span class="hljs-operator">-&gt;</span> ``my = type`` <span class="hljs-operator">-&gt;</span> {| Prop<span class="hljs-operator">:</span> <span class="hljs-symbol">&#x27;``quoted``</span>|}) <span class="hljs-operator">-&gt;</span> <span class="hljs-symbol">&#x27;a</span> list <span class="hljs-operator">-&gt;</span> <span class="hljs-symbol">&#x27;b</span> list</span>) <span class="hljs-operator">=</span> a
<span class="hljs-keyword">let</span> f (a<span class="hljs-type"><span class="hljs-operator">:</span> (<span class="hljs-symbol">&#x27;a</span> <span class="hljs-operator">-&gt;</span> <span class="hljs-symbol">&#x27;b</span>) <span class="hljs-operator">-&gt;</span> <span class="hljs-symbol">&#x27;a</span> list <span class="hljs-operator">-&gt;</span> <span class="hljs-symbol">&#x27;b</span> list <span class="hljs-operator">-&gt;</span> (unit <span class="hljs-operator">-&gt;</span> string) <span class="hljs-operator">-&gt;</span> {| X<span class="hljs-operator">:</span> string |}</span>) <span class="hljs-type"><span class="hljs-operator">:</span> _ <span class="hljs-operator">*</span> (int <span class="hljs-operator">-&gt;</span> unit) </span><span class="hljs-operator">=</span> a, (<span class="hljs-keyword">fun</span> x <span class="hljs-operator">-&gt;</span> ())
<span class="hljs-keyword">let</span> f (a<span class="hljs-type"><span class="hljs-operator">:</span> (<span class="hljs-symbol">&#x27;a</span> <span class="hljs-operator">-&gt;</span> <span class="hljs-symbol">&#x27;b</span>) <span class="hljs-comment">// multiline! (currently not supported)</span></span>
          <span class="hljs-operator">-&gt;</span> {<span class="hljs-operator">|</span> X<span class="hljs-type"><span class="hljs-operator">:</span> (int <span class="hljs-operator">-&gt;</span> {| Y<span class="hljs-operator">:</span> (string <span class="hljs-operator">-&gt;</span> (unit <span class="hljs-comment">(*this is getting*)</span>)<span class="hljs-comment">(*really nested...*)</span>)<span class="hljs-operator">;</span> A<span class="hljs-operator">:</span> ``my = type`` |}) |</span>}
          <span class="hljs-operator">-&gt;</span> <span class="hljs-symbol">&#x27;b</span> list <span class="hljs-operator">-&gt;</span> (unit <span class="hljs-operator">-&gt;</span> string) <span class="hljs-operator">-&gt;</span> {<span class="hljs-operator">|</span> X<span class="hljs-type"><span class="hljs-operator">:</span> string |</span>}) <span class="hljs-operator">=</span> a
<span class="hljs-keyword">let</span> test <span class="hljs-type"><span class="hljs-operator">:</span> string <span class="hljs-comment">(* this is a comment *)</span> </span><span class="hljs-operator">=</span> <span class="hljs-operator">...</span>
<span class="hljs-keyword">let</span> iterate2 (f <span class="hljs-type"><span class="hljs-operator">:</span> unit <span class="hljs-operator">-&gt;</span> <span class="hljs-operator">#</span>seq<span class="hljs-operator">&lt;</span>int<span class="hljs-operator">&gt;</span></span>) <span class="hljs-operator">=</span>
    <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> f() <span class="hljs-keyword">do</span> <span class="hljs-built_in">printfn</span> <span class="hljs-string">&quot;%d&quot;</span> e
<span class="hljs-keyword">type</span> <span class="hljs-title class_">record</span> <span class="hljs-operator">=</span>
    { X<span class="hljs-type"><span class="hljs-operator">:</span> int <span class="hljs-operator">-&gt;</span> (<span class="hljs-symbol">&#x27;a</span> <span class="hljs-operator">-&gt;</span> <span class="hljs-symbol">&#x27;b</span>) <span class="hljs-operator">-&gt;</span> (unit <span class="hljs-operator">-&gt;</span> string) <span class="hljs-operator">-&gt;</span> <span class="hljs-symbol">&#x27;a</span> list <span class="hljs-operator">-&gt;</span> <span class="hljs-symbol">&#x27;b</span> list <span class="hljs-comment">// comment</span></span>
      Y<span class="hljs-type"><span class="hljs-operator">:</span> {| Bla<span class="hljs-operator">:</span> string <span class="hljs-comment">(*comment*)</span> array <span class="hljs-operator">-&gt;</span> unit |} </span>}
<span class="hljs-keyword">type</span> <span class="hljs-title class_">record</span> <span class="hljs-operator">=</span>
    { X<span class="hljs-type"><span class="hljs-operator">:</span> string <span class="hljs-comment">// comment</span></span>
      Y<span class="hljs-type"><span class="hljs-operator">:</span> {|
            Bla<span class="hljs-operator">:</span> string <span class="hljs-comment">(*comment*)</span> array
                 <span class="hljs-operator">-&gt;</span> unit |} </span>}

<span class="hljs-keyword">type</span> <span class="hljs-title class_">FancyClass</span>(thing<span class="hljs-type"><span class="hljs-operator">:</span>int</span>, var2 <span class="hljs-type"><span class="hljs-operator">:</span> string <span class="hljs-operator">-&gt;</span> string</span>, <span class="hljs-variable">``ddzdz``</span><span class="hljs-type"><span class="hljs-operator">:</span> string list</span>, extra) <span class="hljs-keyword">as</span> xxx <span class="hljs-operator">=</span>

    <span class="hljs-keyword">let</span> pf() <span class="hljs-operator">=</span> xxx.Test()
    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mutable</span> myInternalValue <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>

    <span class="hljs-keyword">member</span> xxx.Test() <span class="hljs-operator">=</span> <span class="hljs-string">&quot;F#&quot;</span>

    <span class="hljs-comment">// A read-only property.</span>
    <span class="hljs-keyword">member</span> __.MyReadOnlyProperty <span class="hljs-operator">=</span> myInternalValue
    <span class="hljs-comment">// A write-only property.</span>
    <span class="hljs-keyword">member</span> __.MyWriteOnlyProperty <span class="hljs-keyword">with</span> <span class="hljs-built_in">set</span> (value) <span class="hljs-operator">=</span> myInternalValue <span class="hljs-operator">&lt;-</span> value
    <span class="hljs-comment">// A read-write property.</span>
    <span class="hljs-keyword">member</span> __.MyReadWriteProperty
        <span class="hljs-keyword">with</span> <span class="hljs-built_in">get</span> () <span class="hljs-operator">=</span> myInternalValue
        <span class="hljs-keyword">and</span> <span class="hljs-built_in">set</span> (value) <span class="hljs-operator">=</span> myInternalValue <span class="hljs-operator">&lt;-</span> value

    <span class="hljs-keyword">member</span> __.ReadAndWriteWithSignature
        <span class="hljs-keyword">with</span> <span class="hljs-built_in">get</span> (count <span class="hljs-type"><span class="hljs-operator">:</span> int</span>) <span class="hljs-type"><span class="hljs-operator">:</span> string </span><span class="hljs-operator">=</span> string count
        <span class="hljs-keyword">and</span> <span class="hljs-built_in">set</span> (value <span class="hljs-type"><span class="hljs-operator">:</span> int</span>) <span class="hljs-type"><span class="hljs-operator">:</span> unit </span><span class="hljs-operator">=</span> <span class="hljs-built_in">failwith</span> <span class="hljs-string">&quot;&quot;</span>

    <span class="hljs-keyword">member</span> __.MyReadWriteProperty <span class="hljs-keyword">with</span> <span class="hljs-built_in">get</span> () <span class="hljs-operator">=</span> myInternalValue
    <span class="hljs-keyword">member</span> __.MyReadWriteProperty <span class="hljs-keyword">with</span> <span class="hljs-built_in">set</span> (value) <span class="hljs-operator">=</span> myInternalValue <span class="hljs-operator">&lt;-</span> value

    <span class="hljs-keyword">abstract</span> Update <span class="hljs-type"><span class="hljs-operator">:</span> int <span class="hljs-operator">*</span> string <span class="hljs-operator">*</span> string option <span class="hljs-operator">*</span> obj <span class="hljs-operator">-&gt;</span> FancyClass</span>
    <span class="hljs-keyword">default</span> this.Update (thing<span class="hljs-type"><span class="hljs-operator">:</span>int</span>, var2 <span class="hljs-type"><span class="hljs-operator">:</span> string</span>, <span class="hljs-variable">``name with spaces``</span><span class="hljs-type"><span class="hljs-operator">:</span> string option</span>, extra) <span class="hljs-operator">=</span> this

    <span class="hljs-keyword">member</span> <span class="hljs-keyword">val</span> Property1 <span class="hljs-operator">=</span> thing
    <span class="hljs-keyword">member</span> <span class="hljs-keyword">val</span> Property2 <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span> <span class="hljs-keyword">with</span> <span class="hljs-built_in">get</span>, <span class="hljs-built_in">set</span>

<span class="hljs-comment">// Testing for generic parameters highlighting:</span>

<span class="hljs-keyword">type</span> <span class="hljs-title class_">Ref</span><span class="hljs-operator">&lt;</span><span class="hljs-symbol">&#x27;a</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">=</span>
{ <span class="hljs-keyword">mutable</span> contents<span class="hljs-type"><span class="hljs-operator">:</span> <span class="hljs-symbol">&#x27;a</span> </span>}

<span class="hljs-keyword">type</span> <span class="hljs-title class_">Bla</span><span class="hljs-operator">&lt;</span><span class="hljs-symbol">&#x27;a</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">=</span> {X<span class="hljs-type"><span class="hljs-operator">:</span> string</span>}
<span class="hljs-keyword">type</span> <span class="hljs-title class_">Blah</span><span class="hljs-operator">&lt;</span>
         <span class="hljs-symbol">&#x27;a</span>
         <span class="hljs-operator">&gt;</span> <span class="hljs-operator">=</span> { x<span class="hljs-type"><span class="hljs-operator">:</span> <span class="hljs-symbol">&#x27;a</span> </span>}
<span class="hljs-keyword">type</span> <span class="hljs-title class_">Blah</span> <span class="hljs-operator">&lt;</span>
          <span class="hljs-symbol">&#x27;a</span>
          <span class="hljs-operator">&gt;</span> <span class="hljs-operator">=</span> { x<span class="hljs-type"><span class="hljs-operator">:</span> <span class="hljs-symbol">&#x27;a</span> </span>}
<span class="hljs-keyword">type</span> <span class="hljs-title class_">Bla</span>  <span class="hljs-operator">&lt;</span><span class="hljs-symbol">&#x27;a</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">=</span> {X<span class="hljs-type"><span class="hljs-operator">:</span> string</span>}
<span class="hljs-keyword">let</span> <span class="hljs-keyword">inline</span> asdf x<span class="hljs-type"><span class="hljs-operator">:</span> Bla<span class="hljs-operator">&lt;</span><span class="hljs-symbol">&#x27;a</span><span class="hljs-operator">&gt;</span> </span><span class="hljs-operator">=</span> {X <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>}

<span class="hljs-keyword">let</span> <span class="hljs-keyword">inline</span> asdf x<span class="hljs-type"><span class="hljs-operator">:</span> Bla<span class="hljs-operator">&lt;</span><span class="hljs-symbol">^a</span><span class="hljs-operator">&gt;</span> </span><span class="hljs-operator">=</span> {X <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>}
<span class="hljs-keyword">let</span> <span class="hljs-keyword">inline</span> asdf x<span class="hljs-type"><span class="hljs-operator">:</span> Bla<span class="hljs-operator">&lt;</span> <span class="hljs-symbol">^a</span> <span class="hljs-operator">&gt;</span> </span><span class="hljs-operator">=</span> {X <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>}

<span class="hljs-keyword">let</span> genericSumUnits ( x <span class="hljs-type"><span class="hljs-operator">:</span> float<span class="hljs-operator">&lt;</span><span class="hljs-symbol">&#x27;u</span><span class="hljs-operator">&gt;</span></span>) (y<span class="hljs-type"><span class="hljs-operator">:</span> float<span class="hljs-operator">&lt;</span><span class="hljs-symbol">&#x27;u</span><span class="hljs-operator">&gt;</span></span>) <span class="hljs-operator">=</span> x <span class="hljs-operator">+</span> y

<span class="hljs-keyword">let</span> <span class="hljs-keyword">inline</span> konst x _ <span class="hljs-operator">=</span> x

<span class="hljs-keyword">type</span> <span class="hljs-title class_">CFunctor</span>() <span class="hljs-operator">=</span>
    <span class="hljs-keyword">static</span> <span class="hljs-keyword">member</span> <span class="hljs-keyword">inline</span> fmap (f<span class="hljs-operator">:</span> <span class="hljs-symbol">^a</span> <span class="hljs-operator">-&gt;</span> <span class="hljs-symbol">^b</span>, a<span class="hljs-operator">:</span> <span class="hljs-symbol">^a</span> list) <span class="hljs-operator">=</span> List.map f a
    <span class="hljs-keyword">static</span> <span class="hljs-keyword">member</span> <span class="hljs-keyword">inline</span> fmap (f<span class="hljs-operator">:</span> <span class="hljs-symbol">^a</span> <span class="hljs-operator">-&gt;</span> <span class="hljs-symbol">^b</span>, a<span class="hljs-operator">:</span> <span class="hljs-symbol">^a</span> option) <span class="hljs-operator">=</span>
        <span class="hljs-keyword">match</span> a <span class="hljs-keyword">with</span>
        <span class="hljs-operator">|</span> <span class="hljs-literal">None</span> <span class="hljs-operator">-&gt;</span> <span class="hljs-literal">None</span>
        <span class="hljs-operator">|</span> <span class="hljs-literal">Some</span> x <span class="hljs-operator">-&gt;</span> <span class="hljs-literal">Some</span> (f x)

    <span class="hljs-comment">// default implementation of replace</span>
    <span class="hljs-keyword">static</span> <span class="hljs-keyword">member</span> <span class="hljs-keyword">inline</span> replace<span class="hljs-operator">&lt;</span> <span class="hljs-symbol">^a</span>, <span class="hljs-symbol">^b</span>, <span class="hljs-symbol">^c</span>, <span class="hljs-symbol">^d</span>, <span class="hljs-symbol">^e</span> <span class="hljs-keyword">when</span> <span class="hljs-symbol">^a</span> <span class="hljs-operator">:&gt;</span> CFunctor <span class="hljs-keyword">and</span> (<span class="hljs-symbol">^a</span> <span class="hljs-keyword">or</span> <span class="hljs-symbol">^d</span>)<span class="hljs-type"><span class="hljs-operator">:</span> (static member fmap<span class="hljs-operator">:</span> (<span class="hljs-symbol">^b</span> <span class="hljs-operator">-&gt;</span> <span class="hljs-symbol">^c</span>) <span class="hljs-operator">*</span> <span class="hljs-symbol">^d</span> <span class="hljs-operator">-&gt;</span> <span class="hljs-symbol">^e</span>) <span class="hljs-operator">&gt;</span> (a, f) </span><span class="hljs-operator">=</span>
        ((<span class="hljs-symbol">^a</span> <span class="hljs-keyword">or</span> <span class="hljs-symbol">^d</span>) <span class="hljs-type"><span class="hljs-operator">:</span> (static member fmap <span class="hljs-operator">:</span> (<span class="hljs-symbol">^b</span> <span class="hljs-operator">-&gt;</span> <span class="hljs-symbol">^c</span>) <span class="hljs-operator">*</span> <span class="hljs-symbol">^d</span> <span class="hljs-operator">-&gt;</span> <span class="hljs-symbol">^e</span>) (konst a, f)</span>)

    <span class="hljs-comment">// call overridden replace if present</span>
    <span class="hljs-keyword">static</span> <span class="hljs-keyword">member</span> <span class="hljs-keyword">inline</span> replace<span class="hljs-operator">&lt;</span> <span class="hljs-symbol">^a</span>, <span class="hljs-symbol">^b</span>, <span class="hljs-symbol">^c</span> <span class="hljs-keyword">when</span> <span class="hljs-symbol">^b</span><span class="hljs-type"><span class="hljs-operator">:</span> (static member replace<span class="hljs-operator">:</span> <span class="hljs-symbol">^a</span> <span class="hljs-operator">*</span> <span class="hljs-symbol">^b</span> <span class="hljs-operator">-&gt;</span> <span class="hljs-symbol">^c</span>)<span class="hljs-operator">&gt;</span>(a<span class="hljs-operator">:</span> <span class="hljs-symbol">^a</span>, f<span class="hljs-operator">:</span> <span class="hljs-symbol">^b</span>) </span><span class="hljs-operator">=</span>
        (<span class="hljs-symbol">^b</span> <span class="hljs-type"><span class="hljs-operator">:</span> (static member replace<span class="hljs-operator">:</span> <span class="hljs-symbol">^a</span> <span class="hljs-operator">*</span> <span class="hljs-symbol">^b</span> <span class="hljs-operator">-&gt;</span> <span class="hljs-symbol">^c</span>) (a, f)</span>)

<span class="hljs-keyword">let</span> <span class="hljs-keyword">inline</span> replace_instance<span class="hljs-operator">&lt;</span> <span class="hljs-symbol">^a</span>, <span class="hljs-symbol">^b</span>, <span class="hljs-symbol">^c</span>, <span class="hljs-symbol">^d</span> <span class="hljs-keyword">when</span> (<span class="hljs-symbol">^a</span> <span class="hljs-keyword">or</span> <span class="hljs-symbol">^c</span>)<span class="hljs-type"><span class="hljs-operator">:</span> (static member replace<span class="hljs-operator">:</span> <span class="hljs-symbol">^b</span> <span class="hljs-operator">*</span> <span class="hljs-symbol">^c</span> <span class="hljs-operator">-&gt;</span> <span class="hljs-symbol">^d</span>)<span class="hljs-operator">&gt;</span> (a<span class="hljs-operator">:</span> <span class="hljs-symbol">^b</span>, f<span class="hljs-operator">:</span> <span class="hljs-symbol">^c</span>) </span><span class="hljs-operator">=</span>
        ((<span class="hljs-symbol">^a</span> <span class="hljs-keyword">or</span> <span class="hljs-symbol">^c</span>)<span class="hljs-type"><span class="hljs-operator">:</span> (static member replace<span class="hljs-operator">:</span> <span class="hljs-symbol">^b</span> <span class="hljs-operator">*</span> <span class="hljs-symbol">^c</span> <span class="hljs-operator">-&gt;</span> <span class="hljs-symbol">^d</span>) (a, f)</span>)

<span class="hljs-comment">// Note the concrete type &#x27;CFunctor&#x27; specified in the signature</span>
<span class="hljs-keyword">let</span> <span class="hljs-keyword">inline</span> replace (a<span class="hljs-operator">:</span> <span class="hljs-symbol">^a</span>) (f<span class="hljs-operator">:</span> <span class="hljs-symbol">^b</span>)<span class="hljs-operator">:</span> <span class="hljs-symbol">^a0</span> <span class="hljs-keyword">when</span> (CFunctor <span class="hljs-keyword">or</span>  <span class="hljs-symbol">^b</span>)<span class="hljs-type"><span class="hljs-operator">:</span> (static member replace<span class="hljs-operator">:</span> <span class="hljs-symbol">^a</span> <span class="hljs-operator">*</span>  <span class="hljs-symbol">^b</span> <span class="hljs-operator">-&gt;</span>  <span class="hljs-symbol">^a0</span>) </span><span class="hljs-operator">=</span>
    replace_instance<span class="hljs-operator">&lt;</span>CFunctor, _, _, _<span class="hljs-operator">&gt;</span> (a, f)