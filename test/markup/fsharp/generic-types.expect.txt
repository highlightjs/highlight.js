<span class="hljs-comment">// Primarily testing for generic parameters highlighting...</span>

<span class="hljs-keyword">type</span> <span class="hljs-title class_">Ref</span>&lt;<span class="hljs-symbol">&#x27;a</span>&gt; =
{ <span class="hljs-keyword">mutable</span> contents: <span class="hljs-symbol">&#x27;a</span> }

<span class="hljs-keyword">type</span> <span class="hljs-title class_">Bla</span>&lt;<span class="hljs-symbol">&#x27;a</span>&gt; = {X: <span class="hljs-type">string</span>}
<span class="hljs-keyword">type</span> <span class="hljs-title class_">Blah</span>&lt;
         <span class="hljs-symbol">&#x27;a</span>
         &gt; = { x: <span class="hljs-symbol">&#x27;a</span> }
<span class="hljs-keyword">type</span> <span class="hljs-title class_">Blah</span> &lt;
          <span class="hljs-symbol">&#x27;a</span>
          &gt; = { x: <span class="hljs-symbol">&#x27;a</span> }
<span class="hljs-keyword">type</span> <span class="hljs-title class_">Bla</span>  &lt;<span class="hljs-symbol">&#x27;a</span>&gt; = {X: <span class="hljs-type">string</span>}
<span class="hljs-keyword">let</span> <span class="hljs-keyword">inline</span> asdf x: Bla&lt;<span class="hljs-symbol">&#x27;a</span>&gt; = {X = <span class="hljs-string">&quot;&quot;</span>}

<span class="hljs-keyword">let</span> <span class="hljs-keyword">inline</span> asdf x: Bla&lt;<span class="hljs-symbol">^a</span>&gt; = {X = <span class="hljs-string">&quot;&quot;</span>}
<span class="hljs-keyword">let</span> <span class="hljs-keyword">inline</span> asdf x: Bla&lt; <span class="hljs-symbol">^a</span> &gt; = {X = <span class="hljs-string">&quot;&quot;</span>}

<span class="hljs-keyword">let</span> genericSumUnits ( x : <span class="hljs-type">float</span>&lt;<span class="hljs-symbol">&#x27;u</span>&gt;) (y: <span class="hljs-type">float</span>&lt;<span class="hljs-symbol">&#x27;u</span>&gt;) = x + y

<span class="hljs-keyword">let</span> <span class="hljs-keyword">inline</span> konst x _ = x

<span class="hljs-keyword">type</span> <span class="hljs-title class_">CFunctor</span>() =
    <span class="hljs-keyword">static</span> <span class="hljs-keyword">member</span> <span class="hljs-keyword">inline</span> fmap (f: <span class="hljs-symbol">^a</span> -&gt; <span class="hljs-symbol">^b</span>, a: <span class="hljs-symbol">^a</span> <span class="hljs-type">list</span>) = List.map f a
    <span class="hljs-keyword">static</span> <span class="hljs-keyword">member</span> <span class="hljs-keyword">inline</span> fmap (f: <span class="hljs-symbol">^a</span> -&gt; <span class="hljs-symbol">^b</span>, a: <span class="hljs-symbol">^a</span> <span class="hljs-type">option</span>) =
        <span class="hljs-keyword">match</span> a <span class="hljs-keyword">with</span>
        | <span class="hljs-literal">None</span> -&gt; <span class="hljs-literal">None</span>
        | <span class="hljs-literal">Some</span> x -&gt; <span class="hljs-literal">Some</span> (f x)

    <span class="hljs-comment">// default implementation of replace</span>
    <span class="hljs-keyword">static</span> <span class="hljs-keyword">member</span> <span class="hljs-keyword">inline</span> replace&lt; <span class="hljs-symbol">^a</span>, <span class="hljs-symbol">^b</span>, <span class="hljs-symbol">^c</span>, <span class="hljs-symbol">^d</span>, <span class="hljs-symbol">^e</span> <span class="hljs-keyword">when</span> <span class="hljs-symbol">^a</span> :&gt; CFunctor <span class="hljs-keyword">and</span> (<span class="hljs-symbol">^a</span> <span class="hljs-keyword">or</span> <span class="hljs-symbol">^d</span>): (<span class="hljs-keyword">static</span> <span class="hljs-keyword">member</span> fmap: (<span class="hljs-symbol">^b</span> -&gt; <span class="hljs-symbol">^c</span>) * <span class="hljs-symbol">^d</span> -&gt; <span class="hljs-symbol">^e</span>) &gt; (a, f) =
        ((<span class="hljs-symbol">^a</span> <span class="hljs-keyword">or</span> <span class="hljs-symbol">^d</span>) : (<span class="hljs-keyword">static</span> <span class="hljs-keyword">member</span> fmap : (<span class="hljs-symbol">^b</span> -&gt; <span class="hljs-symbol">^c</span>) * <span class="hljs-symbol">^d</span> -&gt; <span class="hljs-symbol">^e</span>) (konst a, f))

    <span class="hljs-comment">// call overridden replace if present</span>
    <span class="hljs-keyword">static</span> <span class="hljs-keyword">member</span> <span class="hljs-keyword">inline</span> replace&lt; <span class="hljs-symbol">^a</span>, <span class="hljs-symbol">^b</span>, <span class="hljs-symbol">^c</span> <span class="hljs-keyword">when</span> <span class="hljs-symbol">^b</span>: (<span class="hljs-keyword">static</span> <span class="hljs-keyword">member</span> replace: <span class="hljs-symbol">^a</span> * <span class="hljs-symbol">^b</span> -&gt; <span class="hljs-symbol">^c</span>)&gt;(a: <span class="hljs-symbol">^a</span>, f: <span class="hljs-symbol">^b</span>) =
        (<span class="hljs-symbol">^b</span> : (<span class="hljs-keyword">static</span> <span class="hljs-keyword">member</span> replace: <span class="hljs-symbol">^a</span> * <span class="hljs-symbol">^b</span> -&gt; <span class="hljs-symbol">^c</span>) (a, f))

<span class="hljs-keyword">let</span> <span class="hljs-keyword">inline</span> replace_instance&lt; <span class="hljs-symbol">^a</span>, <span class="hljs-symbol">^b</span>, <span class="hljs-symbol">^c</span>, <span class="hljs-symbol">^d</span> <span class="hljs-keyword">when</span> (<span class="hljs-symbol">^a</span> <span class="hljs-keyword">or</span> <span class="hljs-symbol">^c</span>): (<span class="hljs-keyword">static</span> <span class="hljs-keyword">member</span> replace: <span class="hljs-symbol">^b</span> * <span class="hljs-symbol">^c</span> -&gt; <span class="hljs-symbol">^d</span>)&gt; (a: <span class="hljs-symbol">^b</span>, f: <span class="hljs-symbol">^c</span>) =
        ((<span class="hljs-symbol">^a</span> <span class="hljs-keyword">or</span> <span class="hljs-symbol">^c</span>): (<span class="hljs-keyword">static</span> <span class="hljs-keyword">member</span> replace: <span class="hljs-symbol">^b</span> * <span class="hljs-symbol">^c</span> -&gt; <span class="hljs-symbol">^d</span>) (a, f))

<span class="hljs-comment">// Note the concrete type &#x27;CFunctor&#x27; specified in the signature</span>
<span class="hljs-keyword">let</span> <span class="hljs-keyword">inline</span> replace (a: <span class="hljs-symbol">^a</span>) (f: <span class="hljs-symbol">^b</span>): <span class="hljs-symbol">^a0</span> <span class="hljs-keyword">when</span> (CFunctor <span class="hljs-keyword">or</span>  <span class="hljs-symbol">^b</span>): (<span class="hljs-keyword">static</span> <span class="hljs-keyword">member</span> replace: <span class="hljs-symbol">^a</span> *  <span class="hljs-symbol">^b</span> -&gt;  <span class="hljs-symbol">^a0</span>) =
    replace_instance&lt;CFunctor, _, _, _&gt; (a, f)