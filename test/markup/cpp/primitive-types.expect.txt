<span class="hljs-comment">// Primitive types:</span>
<span class="hljs-keyword">char8_t</span> test;
<span class="hljs-keyword">char16_t</span> test;
<span class="hljs-keyword">char32_t</span> test;
<span class="hljs-keyword">char8_t</span> test;
<span class="hljs-keyword">int8_t</span> test;
<span class="hljs-keyword">int16_t</span> test;
<span class="hljs-keyword">int32_t</span> test;
<span class="hljs-keyword">int64_t</span> test;
<span class="hljs-keyword">int_fast8_t</span> test;
<span class="hljs-keyword">int_fast16_t</span> test;
<span class="hljs-keyword">int_fast32_t</span> test;
<span class="hljs-keyword">int_fast64_t</span> test;
<span class="hljs-keyword">int_least8_t</span> test;
<span class="hljs-keyword">int_least16_t</span> test;
<span class="hljs-keyword">int_least32_t</span> test;
<span class="hljs-keyword">int_least64_t</span> test;
<span class="hljs-keyword">intmax_t</span> test;
<span class="hljs-keyword">intptr_t</span> test;
<span class="hljs-keyword">uint8_t</span> test;
<span class="hljs-keyword">uint16_t</span> test;
<span class="hljs-keyword">uint32_t</span> test;
<span class="hljs-keyword">uint64_t</span> test;
<span class="hljs-keyword">uint_fast8_t</span> test;
<span class="hljs-keyword">uint_fast16_t</span> test;
<span class="hljs-keyword">uint_fast32_t</span> test;
<span class="hljs-keyword">uint_fast64_t</span> test;
<span class="hljs-keyword">uint_least8_t</span> test;
<span class="hljs-keyword">uint_least16_t</span> test;
<span class="hljs-keyword">uint_least32_t</span> test;
<span class="hljs-keyword">uint_least64_t</span> test;
<span class="hljs-keyword">uintmax_t</span> test;
<span class="hljs-keyword">uintptr_t</span> test;
<span class="hljs-keyword">max_align_t</span> test;
<span class="hljs-keyword">mbstate_t</span> test;
<span class="hljs-keyword">nullptr_t</span> test;
<span class="hljs-keyword">ptrdiff_t</span> test;
<span class="hljs-keyword">size_t</span> test;
<span class="hljs-keyword">wchar_t</span> test;
<span class="hljs-keyword">wctrans_t</span> test;
<span class="hljs-keyword">wctype_t</span> test;
<span class="hljs-keyword">wint_t</span> test;
  
<span class="hljs-comment">// Non-primitive type with &#x27;_t&#x27;:</span>
<span class="hljs-keyword">struct</span> <span class="hljs-title class_">position_tag</span>;
<span class="hljs-keyword">class</span> <span class="hljs-title class_">_thread</span>;

<span class="hljs-comment">// Type traits and helpers types:</span>
<span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;
<span class="hljs-keyword">using</span> <span class="hljs-keyword">decay_t</span> = <span class="hljs-keyword">typename</span> decay&lt;T&gt;::type;

<span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;
<span class="hljs-keyword">struct</span> <span class="hljs-title class_">X</span> {
  <span class="hljs-keyword">using</span> <span class="hljs-keyword">decayed_t</span> = <span class="hljs-keyword">typename</span> std::<span class="hljs-keyword">decay_t</span>&lt;X&lt;T&gt;&gt;;
};

X&lt;<span class="hljs-keyword">int</span>&amp;&gt;::<span class="hljs-keyword">decayed_t</span> x;