<span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-keyword">define</span> foo 1&lt;&lt;16</span>

<span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> DEBUG</span>
<span class="hljs-function">TYPE1 <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>
<span class="hljs-meta">#<span class="hljs-keyword">else</span></span>
<span class="hljs-type">int</span> <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>
<span class="hljs-meta">#<span class="hljs-keyword">endif</span></span>
</span>{ }

<span class="hljs-meta">#<span class="hljs-keyword">define</span> x(v) ((v))</span>
<span class="hljs-meta"># <span class="hljs-keyword">define</span> x(v) ((v))</span>
<span class="hljs-meta">#  <span class="hljs-keyword">define</span> x(v) ((v))</span>

<span class="hljs-meta">#<span class="hljs-keyword">if</span> MACRO_WITH_STRING_ARG(<span class="hljs-string">&quot;hello \&quot;world\&quot;&quot;</span>)</span>
<span class="hljs-meta">#<span class="hljs-keyword">elif</span> MULTI_LINE <span class="hljs-comment">/* comment */</span> &lt; \
    EXPRESSION</span>
<span class="hljs-type">int</span> bar;
<span class="hljs-meta">#<span class="hljs-keyword">endif</span>  <span class="hljs-comment">// comment</span></span>

<span class="hljs-keyword">if</span> (p) {
<span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> DEBUG</span>
    <span class="hljs-built_in">onething</span>();
<span class="hljs-meta">#<span class="hljs-keyword">endif</span></span>
} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (errno) {
<span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> DEBUG</span>
    <span class="hljs-built_in">anotherthing</span>();
<span class="hljs-meta">#<span class="hljs-keyword">endif</span></span>
}
<span class="hljs-meta">#<span class="hljs-keyword">include</span> </span>
<span class="hljs-meta">#<span class="hljs-keyword">include</span>
</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> </span>what <span class="hljs-keyword">do</span>{ cout &lt;&lt; <span class="hljs-string">"Hello"</span>; } <span class="hljs-keyword">while</span>(<span class="hljs-number">0</span>);
<span class="hljs-meta">#<span class="hljs-keyword">define</span> </span>PI <span class="hljs-number">3.14</span>;
<span class="hljs-meta">#<span class="hljs-keyword">pragma</span> </span><span class="hljs-built_in">warning</span>(disable : <span class="hljs-number">1234</span>) <span class="hljs-comment">// Disable a specific warning</span>
<span class="hljs-meta">#<span class="hljs-keyword">if</span> </span>!<span class="hljs-built_in">defined</span>(CONFIG_OPTION)
<span class="hljs-meta">#<span class="hljs-keyword">error</span> </span><span class="hljs-string">"CONFIG_OPTION is not defined."</span>
<span class="hljs-meta">#<span class="hljs-keyword">endif</span>
</span><span class="hljs-meta">#<span class="hljs-keyword">line</span> </span><span class="hljs-number">42</span> <span class="hljs-string">"mycode.cpp"</span>
<span class="hljs-meta">#<span class="hljs-keyword">undef</span> </span><span class="hljs-function">PI

<span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>
</span>{
	<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;
	<span class="hljs-type">int</span> num = <span class="hljs-number">4</span>;
	cout &lt;&lt; <span class="hljs-string">"Hello"</span>;
	cout &lt;&lt; <span class="hljs-number">123456</span>;
	cout &lt;&lt; <span class="hljs-number">15.965</span>;
	
	<span class="hljs-built_in">printf</span>(<span class="hljs-string">"Hello"</span>);
	
	
	
	<span class="hljs-keyword">struct</span> <span class="hljs-title class_">saad</span> obj;
	<span class="hljs-keyword">do</span>{ cout &lt;&lt; <span class="hljs-string">"Hello"</span>; } <span class="hljs-keyword">while</span>(<span class="hljs-number">0</span>);
	<span class="hljs-built_in">call</span>();
	<span class="hljs-type">int</span> x=<span class="hljs-number">5</span>;
}
<span class="hljs-comment">// this is a continued\
comment.</span>
end
