// Primitive types:
FILE test;
atomic_bool test;
atomic_char test;
atomic_char16_t test;
atomic_char32_t test;
atomic_char8_t test;
atomic_int test;
atomic_int16_t test;
atomic_int32_t test;
atomic_int64_t test;
atomic_int8_t test;
atomic_int_fast16_t test;
atomic_int_fast32_t test;
atomic_int_fast64_t test;
atomic_int_fast8_t test;
atomic_int_least16_t test;
atomic_int_least32_t test;
atomic_int_least64_t test;
atomic_int_least8_t test;
atomic_intmax_t test;
atomic_intptr_t test;
atomic_llong test;
atomic_long test;
atomic_ptrdiff_t test;
atomic_schar test;
atomic_short test;
atomic_size_t test;
atomic_uchar test;
atomic_uint test;
atomic_uint16_t test;
atomic_uint32_t test;
atomic_uint64_t test;
atomic_uint8_t test;
atomic_uint_fast16_t test;
atomic_uint_fast32_t test;
atomic_uint_fast64_t test;
atomic_uint_fast8_t test;
atomic_uint_least16_t test;
atomic_uint_least32_t test;
atomic_uint_least64_t test;
atomic_uint_least8_t test;
atomic_uintmax_t test;
atomic_uintptr_t test;
atomic_ullong test;
atomic_ulong test;
atomic_ushort test;
atomic_wchar_t test;
bool test;
char test;
char16_t test;
char32_t test;
char8_t test;
char8_t test;
clock_t test;
double test;
float test;
fpos_t test;
int test;
int16_t test;
int32_t test;
int64_t test;
int8_t test;
int_fast16_t test;
int_fast32_t test;
int_fast64_t test;
int_fast8_t test;
int_least16_t test;
int_least32_t test;
int_least64_t test;
int_least8_t test;
intmax_t test;
intptr_t test;
jmp_buf test;
long test;
max_align_t test;
mbstate_t test;
nullptr_t test;
ptrdiff_t test;
short test;
sig_atomic_t test;
size_t test;
streamoff test;
streamsize test;
time_t test;
uint16_t test;
uint32_t test;
uint64_t test;
uint8_t test;
uint_fast16_t test;
uint_fast32_t test;
uint_fast64_t test;
uint_fast8_t test;
uint_least16_t test;
uint_least32_t test;
uint_least64_t test;
uint_least8_t test;
uintmax_t test;
uintptr_t test;
va_list test;
void test;
wchar_t test;
wctrans_t test;
wctype_t test;
wint_t test;

// Non-primitive type with '_t':
struct position_tag;
class _thread;

// Type traits and helpers types:
template<class T>
using decay_t = typename decay<T>::type;

template<typename T>
struct X {
  using decayed_t = typename std::decay_t<X<T>>;
};

X<int&>::decayed_t x;