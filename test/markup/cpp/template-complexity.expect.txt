<span class="hljs-keyword">template</span> <span class="hljs-operator">&lt;</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span><span class="hljs-operator">&gt;</span> <span class="hljs-comment">// comment</span>
<span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">foo</span><span class="hljs-params">(T x)</span> </span>{ ; };

<span class="hljs-keyword">namespace</span> impl {
    <span class="hljs-keyword">template</span><span class="hljs-operator">&lt;</span><span class="hljs-keyword">typename</span> T<span class="hljs-operator">&gt;</span>
    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">is_streamable</span><span class="hljs-operator">&lt;</span>T, std::<span class="hljs-type">void_t</span><span class="hljs-operator">&lt;</span><span class="hljs-keyword">decltype</span>(std<span class="hljs-operator">::</span><span class="hljs-built_in">declval</span><span class="hljs-operator">&lt;</span>std<span class="hljs-operator">::</span>wostream <span class="hljs-operator">&amp;</span><span class="hljs-operator">&gt;</span>() <span class="hljs-operator">&lt;&lt;</span> std<span class="hljs-operator">::</span><span class="hljs-built_in">declval</span><span class="hljs-operator">&lt;</span>T<span class="hljs-operator">&gt;</span>())<span class="hljs-operator">&gt;&gt;</span> <span class="hljs-operator">:</span> std::true_type { };
}

<span class="hljs-comment">// Disable overload for already valid operands.</span>
<span class="hljs-keyword">template</span><span class="hljs-operator">&lt;</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>, <span class="hljs-keyword">class</span> <span class="hljs-operator">=</span> std<span class="hljs-operator">::</span><span class="hljs-type">enable_if_t</span><span class="hljs-operator">&lt;</span><span class="hljs-operator">!</span>impl<span class="hljs-operator">::</span>is_streamable_v<span class="hljs-operator">&lt;</span><span class="hljs-type">const</span> T <span class="hljs-operator">&amp;</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">&amp;&amp;</span> std<span class="hljs-operator">::</span>is_convertible_v<span class="hljs-operator">&lt;</span><span class="hljs-type">const</span> T <span class="hljs-operator">&amp;</span>, std<span class="hljs-operator">::</span>wstring_view<span class="hljs-operator">&gt;&gt;</span><span class="hljs-operator">&gt;</span>
std<span class="hljs-operator">::</span>wostream <span class="hljs-operator">&amp;</span><span class="hljs-keyword">operator</span> <span class="hljs-operator">&lt;&lt;</span>(std<span class="hljs-operator">::</span>wostream <span class="hljs-operator">&amp;</span>stream, <span class="hljs-type">const</span> T <span class="hljs-operator">&amp;</span>thing)
{
    <span class="hljs-keyword">return</span> stream <span class="hljs-operator">&lt;&lt;</span> <span class="hljs-built_in">static_cast</span><span class="hljs-operator">&lt;</span>std<span class="hljs-operator">::</span>wstring_view<span class="hljs-operator">&gt;</span>(thing);
}

<span class="hljs-keyword">enum struct</span> <span class="hljs-title class_">DataHolder</span> { };
<span class="hljs-keyword">enum class</span> <span class="hljs-title class_">DataThingy</span> { };
<span class="hljs-keyword">enum class</span> <span class="hljs-title class_">Boolean</span> <span class="hljs-operator">:</span> <span class="hljs-type">char</span> {
    True, False, FileNotFound
};

<span class="hljs-keyword">union</span> <span class="hljs-title class_">Soy</span>
{
};

<span class="hljs-keyword">template</span><span class="hljs-operator">&lt;</span><span class="hljs-keyword">typename</span> t1<span class="hljs-operator">=</span><span class="hljs-type">int</span>,<span class="hljs-type">bool</span> t2<span class="hljs-operator">=</span>(<span class="hljs-number">1</span><span class="hljs-operator">&gt;</span><span class="hljs-number">2</span>),<span class="hljs-keyword">typename</span> t3<span class="hljs-operator">=</span>vector<span class="hljs-operator">&lt;</span><span class="hljs-type">int</span><span class="hljs-operator">&gt;&gt;</span>
t1 <span class="hljs-built_in">test</span>(t1 x)
{
	<span class="hljs-keyword">if</span>(t2)<span class="hljs-keyword">return</span> x;
	<span class="hljs-keyword">return</span> t2;
}
