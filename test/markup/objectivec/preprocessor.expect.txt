<span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-keyword">define</span> foo 1&lt;&lt;16</span>

<span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> DEBUG</span>
TYPE1 foo(<span class="hljs-keyword">void</span>)
<span class="hljs-meta">#<span class="hljs-keyword">else</span></span>
<span class="hljs-keyword">int</span> foo(<span class="hljs-keyword">void</span>)
<span class="hljs-meta">#<span class="hljs-keyword">endif</span></span>
{ }

<span class="hljs-meta">#<span class="hljs-keyword">define</span> x(v) ((v))</span>
<span class="hljs-meta"># <span class="hljs-keyword">define</span> x(v) ((v))</span>
<span class="hljs-meta">#  <span class="hljs-keyword">define</span> x(v) ((v))</span>

<span class="hljs-meta">#<span class="hljs-keyword">if</span> MACRO_WITH_STRING_ARG(<span class="hljs-string">&quot;hello \&quot;world\&quot;&quot;</span>)</span>
<span class="hljs-meta">#<span class="hljs-keyword">elif</span> MULTI_LINE <span class="hljs-comment">/* comment */</span> &lt; \
    EXPRESSION</span>
<span class="hljs-keyword">int</span> bar;
<span class="hljs-meta">#<span class="hljs-keyword">endif</span>  <span class="hljs-comment">// comment</span></span>
